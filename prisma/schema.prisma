generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  folders       Folder[]
  link          Link[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("verification")
}

model Folder {
  id          String   @id @default(cuid()) 
  name        String
  description String?
  isPublic    Boolean  @default(false)
  color       String   @default("#6366F1")
  shareUrl    String?  @unique
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       Link[]

  @@map("folder")
}

model Link {
  id           String   @id @default(cuid())
  url          String
  title        String?
  description  String?
  thumbnail    String?
  favicon      String?
  notes        String?  @db.Text
  source       String? 
  folderId     String?
  userId       String
  tags         Tag[]
  isPublic     Boolean  @default(false)
  shareUrl     String?  @unique
  lastVisited  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folder       Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("link")
}

model Tag {
  id      String @id @default(cuid())
  name    String @unique
  color   String @default("#6366F1")  
  links   Link[]

  @@map("tag")
}
